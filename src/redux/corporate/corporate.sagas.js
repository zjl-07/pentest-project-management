import { all, takeLatest, call, put } from "redux-saga/effects";
import actionTypes from "./corporate.actionTypes";
import {
  fetchCorporateSuccess,
  fetchCorporateFailure,
  fetchCorporateByIdSuccess,
  fetchCorporateByIdFailure,
  addCorporateFailure,
  addCorporateSuccess,
  deleteCorporateFailure,
  updateCorporateFailure,
  updateCorporateSuccess
} from "./corporate.action";
import API from "API/jsonServer";
import { toast } from "react-toastify";
import { authHeader } from "utils/authHeader";

const fetchFromAPI = () =>
  API.get("/company", {
    headers: authHeader()
  });
const fetchFromAPIById = id =>
  API.get(`/company/${id}`, {
    headers: authHeader()
  });
const addCorporate = newCorporate =>
  API.post("/company", newCorporate, {
    headers: authHeader()
  });
const deleteCorporateById = id =>
  API.delete(`/company/${id}`, {
    headers: authHeader()
  });

const updateCorporateById = (id, corporate) =>
  API.put(`/company/${id}`, corporate, {
    headers: authHeader()
  });

export function* fetchCorporate() {
  try {
    const { data } = yield call(fetchFromAPI);
    yield put(fetchCorporateSuccess(data));
  } catch (error) {
    yield put(fetchCorporateFailure(error));
    yield toast.error(`${error}`);
  }
}

export function* onFetchCorporateStart() {
  yield takeLatest(actionTypes.FETCH_CORPORATE_START, fetchCorporate);
}

// by ID

export function* fetchCorporateById({ payload }) {
  try {
    const { data } = yield call(() => fetchFromAPIById(payload));
    yield put(fetchCorporateByIdSuccess(data));
  } catch (error) {
    yield put(fetchCorporateByIdFailure(error));
    yield toast.error(`${error}`);
  }
}

export function* onFetchCorporateByIdStart() {
  yield takeLatest(actionTypes.FETCH_CORPORATE_BY_ID_START, fetchCorporateById);
}

//add New Corporate

export function* addNewCorporate({ payload }) {
  try {
    const { data } = yield call(() => addCorporate(payload));
    yield put(addCorporateSuccess(data));
    yield toast.success(`Successfully creating ${data.name}`);
  } catch (error) {
    yield put(addCorporateFailure(error));
    yield toast.error(`${error}`);
  }
}

export function* onAddNewCorporateStart() {
  yield takeLatest(actionTypes.ADD_CORPORATE_START, addNewCorporate);
}

//delete Corporate

export function* deleteCorporate({ payload }) {
  try {
    yield call(() => deleteCorporateById(payload));
    yield toast.success(`Successfully deleting one corporate`);
  } catch (error) {
    yield put(deleteCorporateFailure(error));
    yield toast.error(`${error}`);
  }
}

export function* onDeleteCorporate() {
  yield takeLatest(actionTypes.DELETE_CORPORATE_START, deleteCorporate);
}

//update corporate

export function* updateCorporate({ payload: { id, form } }) {
  try {
    const { data } = yield call(() => updateCorporateById(id, form));
    yield put(updateCorporateSuccess(data));
    yield toast.success(`Successfully updating ${data.name}`);
  } catch (error) {
    yield put(updateCorporateFailure(error));
    yield toast.error(`${error}`);
  }
}

export function* onUpdateCorporate() {
  yield takeLatest(actionTypes.UPDATE_CORPORATE_START, updateCorporate);
}

export function* corporateSagas() {
  yield all([
    call(onFetchCorporateStart),
    call(onFetchCorporateByIdStart),
    call(onAddNewCorporateStart),
    call(onDeleteCorporate),
    call(onUpdateCorporate)
  ]);
}
