import { all, takeLatest, call, put } from "redux-saga/effects";
import actionTypes from "./corporate.actionTypes";
import {
  fetchCorporateSuccess,
  fetchCorporateFailure,
  fetchCorporateByIdSuccess,
  fetchCorporateByIdFailure,
  addCorporateFailure,
  deleteCorporateFailure,
  updateCorporateFailure
} from "./corporate.action";
import API from "API/jsonServer";

const fetchFromAPI = () => API.get("/corporate");
const fetchFromAPIById = id => API.get(`/corporate/${id}`);
const addCorporate = newCorporate => API.post("/corporate", newCorporate);
const deleteCorporateById = id => API.delete(`/corporate/${id}`);
const updateCorporateById = (id, corporate) =>
  API.put(`/corporate/${id}`, corporate);

export function* fetchCorporate() {
  try {
    const { data } = yield call(fetchFromAPI);
    yield put(fetchCorporateSuccess(data));
  } catch (error) {
    yield put(fetchCorporateFailure(error));
  }
}

export function* onFetchCorporateStart() {
  yield takeLatest(actionTypes.FETCH_CORPORATE_START, fetchCorporate);
}

// by ID

export function* fetchCorporateById({ payload }) {
  try {
    const { data } = yield fetchFromAPIById(payload);
    yield put(fetchCorporateByIdSuccess(data));
  } catch (error) {
    yield put(fetchCorporateByIdFailure(error));
  }
}

export function* onFetchCorporateByIdStart() {
  yield takeLatest(actionTypes.FETCH_CORPORATE_BY_ID_START, fetchCorporateById);
}

//add New Corporate

export function* addNewCorporate({ payload }) {
  try {
    yield call(addCorporate(payload));
  } catch (error) {
    yield put(addCorporateFailure(error));
  }
}

export function* onAddNewCorporateStart() {
  yield takeLatest(actionTypes.ADD_CORPORATE_START, addNewCorporate);
}

//delete Corporate

export function* deleteCorporate({ payload }) {
  try {
    yield call(deleteCorporateById(payload));
  } catch (error) {
    yield put(deleteCorporateFailure(error));
  }
}

export function* onDeleteCorporate() {
  yield takeLatest(actionTypes.DELETE_CORPORATE_START, deleteCorporate);
}

//update corporate

export function* updateCorporate({ payload: { id, form } }) {
  console.log(id, form);
  try {
    yield call(updateCorporateById(id, form));
  } catch (error) {
    yield put(updateCorporateFailure(error));
  }
}

export function* onUpdateCorporate() {
  yield takeLatest(actionTypes.UPDATE_CORPORATE_START, updateCorporate);
}

export function* corporateSagas() {
  yield all([
    call(onFetchCorporateStart),
    call(onFetchCorporateByIdStart),
    call(onAddNewCorporateStart),
    call(onDeleteCorporate),
    call(onUpdateCorporate)
  ]);
}
