import { all, takeLatest, call, put } from "redux-saga/effects";
import actionTypes from "./vuln.actionTypes";
import {
  fetchVulnsByProjectIdSuccess,
  fetchVulnsByProjectIdFailure,
  fetchVulnByIdSuccess,
  fetchVulnByIdFailure,
  addVulnSuccess,
  addVulnFailure,
  updateVulnSuccess,
  updateVulnFailure,
  deleteVulnFailure
} from "./vuln.action";
import API from "API/jsonServer";
import { authHeader } from "utils/authHeader";
import { toast } from "react-toastify";

const fetchVulnsByProjectIdFromAPI = id =>
  API.get(`/projects/${id}/vulns`, {
    headers: authHeader()
  });

const fetchVulnByIdFromAPI = id =>
  API.get(`/vulns/${id}`, {
    headers: authHeader()
  });

const addVuln = form =>
  API.post(`projects/${form.projectId}/vulns`, form, {
    headers: authHeader()
  });

const updateVuln = (id, vuln) =>
  API.put(`/vulns/${id}`, vuln, {
    headers: authHeader()
  });

const deleteVuln = id =>
  API.delete(`/vulns/${id}`, {
    headers: authHeader()
  });

export function* fetchVulnsByProjectId({ payload }) {
  try {
    const { data } = yield call(() => fetchVulnsByProjectIdFromAPI(payload));
    yield put(fetchVulnsByProjectIdSuccess(data));
  } catch (error) {
    yield toast.error(`${error}`);
    yield put(fetchVulnsByProjectIdFailure(error));
  }
}

export function* onFetchVulnsByProectIdStart() {
  yield takeLatest(
    actionTypes.FETCH_VULNS_BY_PROJECT_ID_START,
    fetchVulnsByProjectId
  );
}

export function* fetchVulnById({ payload }) {
  try {
    const { data } = yield call(() => fetchVulnByIdFromAPI(payload));
    yield put(fetchVulnByIdSuccess(data));
  } catch (error) {
    yield toast.error(`${error}`);
    yield put(fetchVulnByIdFailure(error));
  }
}

export function* onFetchVulnByIdStart() {
  yield takeLatest(actionTypes.FETCH_VULN_BY_ID_START, fetchVulnById);
}

//add
export function* addNewVuln({ payload }) {
  try {
    const { data } = yield call(() => addVuln(payload));
    yield put(addVulnSuccess(data));
    yield toast.success(`Successfully creating ${data.name}`);
  } catch (error) {
    yield toast.error(`${error}`);
    yield put(addVulnFailure(error));
  }
}

export function* onAddVulnStart() {
  yield takeLatest(actionTypes.ADD_VULN_START, addNewVuln);
}

//update
export function* updateVulnById({ payload: { id, form } }) {
  try {
    const { data } = yield call(() => updateVuln(id, form));
    yield put(updateVulnSuccess(data));
    yield toast.success(`Successfully updating ${data.name}`);
  } catch (error) {
    yield toast.error(`${error}`);
    yield put(updateVulnFailure(error));
  }
}

export function* onUpdateVulnStart() {
  yield takeLatest(actionTypes.UPDATE_VULN_START, updateVulnById);
}

//update
export function* deleteVulnById({ payload }) {
  try {
    yield call(() => deleteVuln(payload));
    yield toast.success(`Successfully deleting one finding!`);
  } catch (error) {
    yield toast.error(`${error}`);
    yield put(deleteVulnFailure(error));
  }
}

export function* ondeleteVulnStart() {
  yield takeLatest(actionTypes.DELETE_VULN_START, deleteVulnById);
}

export function* vulnSagas() {
  yield all([
    call(onFetchVulnsByProectIdStart),
    call(onFetchVulnByIdStart),
    call(onAddVulnStart),
    call(onUpdateVulnStart),
    call(ondeleteVulnStart)
  ]);
}
