import actionTypes from "./vuln.actionTypes";
import { deleteItem } from "utils/utils";

const INITIAL_STATE = {
  vulns: [],
  isFetching: false,
  errorMessage: "",
  vuln: {}
};

export default (state = INITIAL_STATE, action) => {
  switch (action.type) {
    case actionTypes.FETCH_VULNS_BY_PROJECT_ID_START:
    case actionTypes.FETCH_VULN_BY_ID_START:
    case actionTypes.ADD_VULN_START:
    case actionTypes.UPDATE_VULN_START:
      return {
        ...state,
        isFetching: true
      };
    case actionTypes.FETCH_VULNS_BY_PROJECT_ID_FAILURE:
    case actionTypes.FETCH_VULN_BY_ID_FAILURE:
    case actionTypes.ADD_VULN_FAILURE:
    case actionTypes.UPDATE_VULN_FAILURE:
    case actionTypes.DELETE_VULN_FAILURE:
      return {
        ...state,
        isFetching: false,
        errorMessage: action.payload
      };
    case actionTypes.FETCH_VULNS_BY_PROJECT_ID_SUCCESS:
      return {
        ...state,
        vulns: action.payload,
        isFetching: false
      };
    case actionTypes.FETCH_VULN_BY_ID_SUCCESS:
      return {
        ...state,
        isFetching: false,
        vuln: action.payload
      };
    case actionTypes.ADD_VULN_SUCCESS:
      return {
        ...state,
        isFetching: false,
        vulns: [...state.vulns]
      };
    case actionTypes.UPDATE_VULN_SUCCESS:
      const vulns = [...state.vulns];
      const { payload } = action;
      const index = vulns.findIndex(c => c._id === payload._id);
      vulns[index] = payload;

      return {
        ...state,
        vulns,
        isFetching: false
      };
    case actionTypes.DELETE_VULN_START:
      return {
        ...state,
        vulns: deleteItem(state.vulns, action.payload),
        isFetching: false
      };
    default:
      return state;
  }
};
