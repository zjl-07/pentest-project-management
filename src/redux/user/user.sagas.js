import { all, takeLatest, call, put } from "redux-saga/effects";
import actionTypes from "./user.actionTypes";
import {
  fetchUsersSuccess,
  fetchUsersFailure,
  updateUserSuccess,
  updateUserFailure,
  fetchUserByIdSuccess,
  fetchUserByIdFailure,
  loginSuccess,
  loginFailure
} from "./user.action";
import {
  fetchProjectsStart,
  fetchMyProjectsStart
} from "redux/project/project.action";
import { fetchCorporateStart } from "redux/corporate/corporate.action";
import { fetchDescStart } from "redux/desc/desc.action";
import { fetchUsersStart } from "redux/user/user.action";
import API from "API/jsonServer";
import { toast } from "react-toastify";
import { authHeader } from "utils/authHeader";

const fetchFromAPI = () =>
  API.get("/users/all", {
    headers: authHeader()
  });

const login = data => API.post("users/login", data);
const register = data =>
  API.post("users", data, {
    headers: authHeader()
  });

const deleteUserFromAPI = id =>
  API.delete(`users/${id}`, {
    headers: authHeader()
  });

const fetchUserByIdFromAPI = id =>
  API.get(`/users/${id}`, {
    headers: authHeader()
  });

const updateUserById = (id, project) =>
  API.put(`/users/${id}`, project, {
    headers: authHeader()
  });

export function* fetchUsers() {
  try {
    const { data } = yield call(fetchFromAPI);
    yield put(fetchUsersSuccess(data));
  } catch (error) {
    yield toast.error(`${error}`);
    yield put(fetchUsersFailure(error));
  }
}

export function* onFetchUsersStart() {
  yield takeLatest(actionTypes.FETCH_USERS_START, fetchUsers);
}

export function* loginStart({ payload: { values, history } }) {
  try {
    const { data } = yield call(() => login(values));
    localStorage.setItem("currentUser", JSON.stringify(data));
    yield history.push("/");
    yield put(loginSuccess(data));

    yield put(fetchCorporateStart());
    yield put(fetchDescStart());
    yield put(fetchUsersStart());
    yield put(fetchMyProjectsStart());
    yield put(fetchProjectsStart());

    yield toast.success("You have logged in!");
  } catch (error) {
    yield toast.error(`${error}`);
    yield put(loginFailure(error));
  }
}

export function* onLoginStart() {
  yield takeLatest(actionTypes.LOGIN_START, loginStart);
}

export function* registerStart({ payload: { values, history } }) {
  try {
    yield call(() => register(values));
    yield history.push("/login");
    yield toast.success("You have register new account!");
  } catch (error) {
    yield toast.error(error);
  }
}

export function* onRegisterStart() {
  yield takeLatest(actionTypes.REGISTER_START, registerStart);
}

//delete

export function* deleteUser({ payload }) {
  try {
    yield call(() => deleteUserFromAPI(payload));
    yield toast.success(`Successfully deleting one user`);
  } catch (error) {
    yield toast.error(error);
  }
}

export function* onDeleteUser() {
  yield takeLatest(actionTypes.DELETE_USER_START, deleteUser);
}

//fetch by id

export function* fetchUserById({ payload }) {
  try {
    const { data } = yield call(() => fetchUserByIdFromAPI(payload));
    yield put(fetchUserByIdSuccess(data));
  } catch (error) {
    yield put(fetchUserByIdFailure(error));
  }
}

export function* onFetchUserById() {
  yield takeLatest(actionTypes.FETCH_USER_BY_ID_START, fetchUserById);
}

//update

export function* updateUser({ payload: { id, form } }) {
  try {
    const { data } = yield call(() => updateUserById(id, form));
    yield put(updateUserSuccess(data));
    yield toast.success(`Successfully updating ${data.name}`);
  } catch (error) {
    yield put(updateUserFailure(error));
    yield toast.error(`${error}`);
  }
}

export function* onUpdateUser() {
  yield takeLatest(actionTypes.UPDATE_USER_START, updateUser);
}

export function* userSagas() {
  yield all([
    call(onFetchUsersStart),
    call(onLoginStart),
    call(onRegisterStart),
    call(onFetchUserById),
    call(onDeleteUser),
    call(onUpdateUser)
  ]);
}
