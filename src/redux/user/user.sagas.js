import { all, takeLatest, call, put } from "redux-saga/effects";
import actionTypes from "./user.actionTypes";
import {
  fetchUsersSuccess,
  fetchUsersFailure,
  loginSuccess,
  loginFailure
} from "./user.action";
import API from "API/jsonServer";
import { toast } from "react-toastify";
import { authHeader } from "utils/authHeader";

const fetchFromAPI = () =>
  API.get("/users/all", {
    headers: authHeader()
  });

const login = data => API.post("users/login", data);
const register = data => API.post("users", data);

export function* fetchUsers() {
  try {
    const { data } = yield call(fetchFromAPI);
    yield put(fetchUsersSuccess(data));
  } catch (error) {
    yield put(fetchUsersFailure(error));
  }
}

export function* onFetchUsersStart() {
  yield takeLatest(actionTypes.FETCH_USERS_START, fetchUsers);
}

export function* loginStart({ payload: { values, history } }) {
  try {
    const { data } = yield call(() => login(values));
    localStorage.setItem("currentUser", JSON.stringify(data));
    yield put(loginSuccess(data));
    yield history.push("/");
    yield toast.success("You have logged in!");
  } catch (error) {
    yield put(loginFailure(error));
  }
}

export function* onLoginStart() {
  yield takeLatest(actionTypes.LOGIN_START, loginStart);
}

export function* registerStart({ payload: { values, history } }) {
  try {
    yield call(() => register(values));
    yield history.push("/login");
    yield toast.success("You have register new account!");
  } catch (error) {
    yield toast.warn(error);
  }
}

export function* onRegisterStart() {
  yield takeLatest(actionTypes.REGISTER_START, registerStart);
}

export function* userSagas() {
  yield all([
    call(onFetchUsersStart),
    call(onLoginStart),
    call(onRegisterStart)
  ]);
}
