import actionTypes from "./project.actionTypes";
import { deleteItem } from "utils/utils";

const INITIAL_STATE = {
  allProjects: [],
  projects: [],
  isFetching: false,
  errorMessage: undefined,
  projectById: {}
};

export default (state = INITIAL_STATE, action) => {
  switch (action.type) {
    case actionTypes.FETCH_PROJECTS_START:
    case actionTypes.FETCH_PROJECT_BY_CORPORATE_ID_START:
    case actionTypes.FETCH_PROJECT_BY_ID_START:
      return {
        ...state,
        isFetching: true
      };
    case actionTypes.FETCH_PROJECTS_SUCCESS:
      return {
        ...state,
        allProjects: action.payload,
        isFetching: false
      };
    case actionTypes.FETCH_PROJECT_BY_ID_SUCCESS:
      return {
        ...state,
        projectById: action.payload,
        isFetching: false
      };
    case actionTypes.FETCH_PROJECT_BY_CORPORATE_ID_SUCCESS:
      console.log("reducer project by corporate id", action.payload);
      return {
        ...state,
        projects: action.payload,
        isFetching: false
      };
    case actionTypes.FETCH_PROJECT_BY_CORPORATE_ID_FAILURE:
    case actionTypes.ADD_PROJECT_FAILURE:
    case actionTypes.UPDATE_PROJECT_FAILURE:
    case actionTypes.DELETE_PROJECT_FAILURE:
    case actionTypes.FETCH_PROJECTS_FAILURE:
    case actionTypes.FETCH_PROJECT_BY_ID_FAILURE:
      return {
        ...state,
        errorMessage: action.payload,
        isFetching: false
      };
    case actionTypes.ADD_PROJECT_SUCCESS:
      return {
        ...state,
        isFetching: false,
        projects: [...state.projects, action.payload]
      };
    case actionTypes.UPDATE_PROJECT_SUCCESS:
      const projects = [...state.projects];
      const allProjects = [...state.allProjects];
      const { payload } = action;
      const index = projects.findIndex(c => c.id === payload.id);
      const index_2 = allProjects.findIndex(c => c.id === payload.id);
      projects[index] = payload;
      allProjects[index_2] = payload;

      return {
        ...state,
        projects,
        allProjects,
        isFetching: false
      };
    case actionTypes.DELETE_PROJECT_START:
      return {
        ...state,
        allProjects: deleteItem(state.allProjects, action.payload),
        projects: deleteItem(state.projects, action.payload),
        isFetching: false
      };
    default:
      return state;
  }
};
