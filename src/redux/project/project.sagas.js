import { all, takeLatest, call, put } from "redux-saga/effects";
import actionTypes from "./project.actionTypes";
import {
  fetchProjectsSuccess,
  fetchProjectsFailure,
  fetchProjectByIdSuccess,
  fetchProjectByIdFailure,
  addProjectFailure,
  fetchProjectByCorporateIdSuccess,
  fetchProjectByCorporateIdFailure,
  updateProjectSuccess,
  updateProjectFailure,
  deleteProjectFailure
} from "./project.action";
import API from "API/jsonServer";
import { toast } from "react-toastify";
import { authHeader } from "utils/authHeader";

const fetchFromAPI = () =>
  API.get(`/projects`, {
    headers: authHeader()
  });

const fetchFromAPIById = id =>
  API.get(`/projects/${id}`, {
    headers: authHeader()
  });

const fetchFromAPIByCorporateId = id =>
  API.get(`/company/${id}/projects`, {
    headers: authHeader()
  });

const addProject = (newProject, id) => {
  const formData = new FormData();
  const keys = Object.keys(newProject);
  keys.forEach(k => formData.append(k, newProject[k]));
  const headers = { ...authHeader(), "Content-Type": "multipart/form-data" };

  return API.post(`/company/${id}/projects`, formData, {
    headers
  });
};

const updateProjectById = (id, project) => {
  const formData = new FormData();
  const keys = Object.keys(project);
  keys.forEach(k => formData.append(k, project[k]));
  const headers = { ...authHeader(), "Content-Type": "multipart/form-data" };

  return API.put(`/projects/${id}`, formData, {
    headers
  });
};

const deleteProjectById = id =>
  API.delete(`/projects/${id}`, {
    headers: authHeader()
  });

export function* fetchProjects() {
  try {
    const { data } = yield call(fetchFromAPI);
    yield put(fetchProjectsSuccess(data));
  } catch (error) {
    yield put(fetchProjectsFailure(error));
  }
}

export function* onFetchProjectStart() {
  yield takeLatest(actionTypes.FETCH_PROJECTS_START, fetchProjects);
}

export function* fetchProjectsById({ payload }) {
  try {
    const { data } = yield call(() => fetchFromAPIById(payload));
    yield put(fetchProjectByIdSuccess(data));
  } catch (error) {
    yield put(fetchProjectByIdFailure(error));
  }
}

export function* onFetchProjectByIdStart() {
  yield takeLatest(actionTypes.FETCH_PROJECT_BY_ID_START, fetchProjectsById);
}

//fetch project from API
export function* fetchProjectsByCorporateId({ payload }) {
  try {
    const { data } = yield call(() => fetchFromAPIByCorporateId(payload));
    yield put(fetchProjectByCorporateIdSuccess(data));
  } catch (error) {
    yield put(fetchProjectByCorporateIdFailure(error));
  }
}

export function* onFetchProjectByCorporateIdStart() {
  yield takeLatest(
    actionTypes.FETCH_PROJECT_BY_CORPORATE_ID_START,
    fetchProjectsByCorporateId
  );
}

//add Projects
export function* addNewProject({ payload }) {
  try {
    const { corporateId } = payload;
    const { data } = yield call(() => addProject(payload, corporateId));
    yield toast.success(`Successfully creating ${data.name}`);
  } catch (error) {
    yield put(addProjectFailure(error));
    yield toast.error(`${error}`);
  }
}

export function* onAddProjectStart() {
  yield takeLatest(actionTypes.ADD_PROJECT_START, addNewProject);
}

//update

export function* updateProject({ payload: { id, form } }) {
  try {
    const { data } = yield call(() => updateProjectById(id, form));
    yield put(updateProjectSuccess(data));
    yield toast.success(`Successfully updating ${data.name}`);
  } catch (error) {
    yield put(updateProjectFailure(error));
    yield toast.error(`${error}`);
  }
}

export function* onUpdateProject() {
  yield takeLatest(actionTypes.UPDATE_PROJECT_START, updateProject);
}

//delete

export function* deleteProject({ payload }) {
  try {
    yield call(() => deleteProjectById(payload));
    yield toast.success(`Successfully deleting one project`);
  } catch (error) {
    yield put(deleteProjectFailure(error));
    yield toast.error(`${error}`);
  }
}

export function* onDeleteProject() {
  yield takeLatest(actionTypes.DELETE_PROJECT_START, deleteProject);
}

export function* projectSagas() {
  yield all([
    call(onFetchProjectStart),
    call(onFetchProjectByCorporateIdStart),
    call(onAddProjectStart),
    call(onFetchProjectByIdStart),
    call(onUpdateProject),
    call(onDeleteProject)
  ]);
}
