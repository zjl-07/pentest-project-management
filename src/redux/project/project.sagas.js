import { all, takeLatest, call, put } from "redux-saga/effects";
import actionTypes from "./project.actionTypes";
import {
  fetchProjectsSuccess,
  fetchProjectsFailure,
  addProjectFailure,
  addProjectSuccess,
  fetchProjectByCorporateIdSuccess,
  fetchProjectByCorporateIdFailure
} from "./project.action";
import API from "API/jsonServer";

const fetchFromAPI = () => API.get(`/project`);
const fetchFromAPIByCorporateId = id => API.get(`/corporate/${id}/project`);
const addProject = (newProject, id) =>
  API.post(`/corporate/${id}/project`, newProject);

export function* fetchProjects() {
  try {
    const { data } = yield call(fetchFromAPI);
    yield put(fetchProjectsSuccess(data));
  } catch (error) {
    yield put(fetchProjectsFailure(error));
  }
}

export function* onFetchProjectStart() {
  yield takeLatest(actionTypes.FETCH_PROJECTS_START, fetchProjects);
}

//fetch project from API
export function* fetchProjectsByCorporateId({ payload }) {
  try {
    const { data } = yield call(() => fetchFromAPIByCorporateId(payload));
    console.log("sagas:", data);
    yield put(fetchProjectByCorporateIdSuccess(data));
  } catch (error) {
    yield put(fetchProjectByCorporateIdFailure(error));
  }
}

export function* onFetchProjectByCorporateIdStart() {
  yield takeLatest(
    actionTypes.FETCH_PROJECT_BY_CORPORATE_ID_START,
    fetchProjectsByCorporateId
  );
}

//add Projects
export function* addNewProject({ payload }) {
  try {
    const { corporateId } = payload;
    const { data } = yield call(() => addProject(payload, corporateId));
    yield put(addProjectSuccess(data));
  } catch (error) {
    yield put(addProjectFailure(error));
  }
}

export function* onAddProjectStart() {
  yield takeLatest(actionTypes.ADD_PROJECT_START, addNewProject);
}

export function* projectSagas() {
  yield all([
    call(onFetchProjectStart),
    call(onFetchProjectByCorporateIdStart),
    call(onAddProjectStart)
  ]);
}
