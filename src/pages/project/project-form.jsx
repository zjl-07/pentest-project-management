import React, { Component } from "react";
import { createStructuredSelector } from "reselect";
import { connect } from "react-redux";
import { withRouter } from "react-router-dom";
import { Form, Field } from "react-final-form";
import { TextField } from "final-form-material-ui";
import { Paper, Grid, Button, MenuItem, Chip } from "@material-ui/core";
import { MuiPickersUtilsProvider } from "@material-ui/pickers";
import DateFnsUtils from "@date-io/date-fns";
import DatePickerWrapper from "components/date-picker/date-picker";
import {
  addProjectStart,
  fetchProjectByIdStart,
  updateProjectStart
} from "redux/project/project.action";
import { selectProjectById } from "redux/project/project.selector";
import { selectAllUser } from "redux/user/user.selector";
import SelectMulti from "components/multi-select/multi-select";

class ProjectForm extends Component {
  state = {
    user: []
  };

  onSubmit = async values => {
    const { id, projectId } = this.props.match.params;
    const { addProject, history, updateProject } = this.props;
    const newValue = {
      ...values,
      corporateId: id,
      target: "",
      team: this.state.user
    };

    if (projectId) {
      updateProject(projectId, newValue);
    } else {
      addProject(newValue);
    }

    history.goBack();
  };

  handleChange = event => {
    const { value } = event.target;
    const newValue = [...value];
    this.setState({ user: newValue });
  };

  componentDidMount() {
    const { projectId } = this.props.match.params;
    const { fetchProjectById } = this.props;
    fetchProjectById(projectId);
  }

  render() {
    const { onSubmit, handleChange } = this;
    const { history, project, users } = this.props;
    const { user } = this.state;
    const { team } = project;

    return (
      <div className="customed_form">
        <div className="center">
          <h2>Add/Edit Project</h2>
        </div>
        <Form
          onSubmit={onSubmit}
          initialValues={{ ...project }}
          render={({ handleSubmit, submitting, values }) => (
            <form onSubmit={handleSubmit} noValidate>
              <Paper className="customed_form-content">
                <Grid container alignItems="flex-start" spacing={2}>
                  <Grid item xs={12}>
                    <Field
                      fullWidth
                      required
                      name="projectName"
                      component={TextField}
                      type="text"
                      label="Project Name"
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <Field
                      name="description"
                      component={TextField}
                      fullWidth
                      margin="normal"
                      label="Project Description"
                    />
                  </Grid>
                  <MuiPickersUtilsProvider utils={DateFnsUtils}>
                    <Grid item xs={6}>
                      <Field
                        name="startDate"
                        component={DatePickerWrapper}
                        fullWidth
                        margin="normal"
                        label="Start Date Pentest"
                      />
                    </Grid>
                    <Grid item xs={6}>
                      <Field
                        name="endDate"
                        component={DatePickerWrapper}
                        fullWidth
                        margin="normal"
                        label="End Date Pentest"
                      />
                    </Grid>
                  </MuiPickersUtilsProvider>
                  <MuiPickersUtilsProvider utils={DateFnsUtils}>
                    <Grid item xs={6}>
                      <Field
                        name="reportStartDate"
                        component={DatePickerWrapper}
                        fullWidth
                        margin="normal"
                        label="Start Date Report"
                      />
                    </Grid>
                    <Grid item xs={6}>
                      <Field
                        name="reportEndDate"
                        component={DatePickerWrapper}
                        fullWidth
                        margin="normal"
                        label="End Date Report"
                      />
                    </Grid>
                  </MuiPickersUtilsProvider>

                  <Grid item xs={6} className="team-field">
                    <Field
                      input={{
                        name: "team",
                        onChange: handleChange,
                        value: user
                      }}
                      label="Team"
                      component={SelectMulti}
                      formControlProps={{ fullWidth: true }}
                    >
                      {users.map(user => (
                        <MenuItem key={user.id} value={user.name}>
                          {user.name}
                        </MenuItem>
                      ))}
                    </Field>
                    <div className="current-team">
                      Current team :{" "}
                      {team &&
                        team.map(element => (
                          <Chip
                            id="default-size"
                            variant="outlined"
                            key={element}
                            label={element}
                          />
                        ))}
                    </div>
                  </Grid>
                  <Grid item xs={6}>
                    <Field
                      InputLabelProps={{
                        shrink: true
                      }}
                      name="target"
                      component={TextField}
                      type="file"
                      fullWidth
                      margin="normal"
                      label="Target"
                    />
                  </Grid>
                </Grid>

                <Grid
                  item
                  xs={12}
                  style={{
                    marginTop: 16,
                    display: "flex",
                    justifyContent: "flex-end"
                  }}
                >
                  <Button
                    id="default-size"
                    variant="contained"
                    color="default"
                    className="u-margin-right-small"
                    onClick={() => history.goBack()}
                  >
                    Cancel
                  </Button>

                  <Button
                    id="default-size"
                    variant="contained"
                    color="primary"
                    type="submit"
                    disabled={submitting}
                  >
                    Submit
                  </Button>
                </Grid>
              </Paper>
            </form>
          )}
        />
      </div>
    );
  }
}

const mapStateToProps = createStructuredSelector({
  project: selectProjectById,
  users: selectAllUser
});

const mapDispatchToProps = dispatch => ({
  addProject: form => dispatch(addProjectStart(form)),
  fetchProjectById: id => dispatch(fetchProjectByIdStart(id)),
  updateProject: (id, form) => dispatch(updateProjectStart(id, form))
});
export default withRouter(
  connect(mapStateToProps, mapDispatchToProps)(ProjectForm)
);
