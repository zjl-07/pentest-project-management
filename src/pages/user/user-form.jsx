import React, { useEffect } from "react";
import { withRouter } from "react-router-dom";
import { createStructuredSelector } from "reselect";
import { connect } from "react-redux";
import { Form, Field } from "react-final-form";
import { TextField, Select } from "final-form-material-ui";
import { Paper, Button, MenuItem } from "@material-ui/core";
import { fetchUserByIdStart, updateUserStart } from "redux/user/user.action";
import { registerValidation } from "utils/validate";
import { selectUserById } from "redux/user/user.selector";

const UserForm = ({ history, fetchUser, match, user, updateUser }) => {
  const { id } = match.params;

  useEffect(() => {
    fetchUser(id);
  }, [fetchUser, id]);

  const onSubmit = async values => {
    updateUser(id, values);
    history.goBack();
  };
  const selectValue = ["project manager", "user", "admin"];

  const fieldProps = [
    { name: "name", label: "Name", component: TextField },
    { name: "email", label: "Email", component: TextField },
    {
      name: "password",
      label: "Password",
      type: "password",
      component: TextField
    },
    {
      name: "role",
      label: "Role",
      component: Select,
      formControlProps: {
        fullWidth: true,
        variant: "outlined",
        className: "u-margin-top-small"
      }
    }
  ];

  const renderField = () =>
    fieldProps.map(field =>
      field.name === "role" ? (
        <Field key={field.name} {...field}>
          {selectValue.map(value => (
            <MenuItem key={value} value={value}>
              {value}
            </MenuItem>
          ))}
        </Field>
      ) : (
        <Field
          key={field.name}
          fullWidth
          margin="normal"
          variant="outlined"
          {...field}
        />
      )
    );

  return (
    <div className="center middle-height">
      <Form
        onSubmit={onSubmit}
        initialValues={{ ...user }}
        validate={registerValidation}
        render={({ handleSubmit, pristine, valid, values }) => (
          <form onSubmit={handleSubmit} noValidate>
            <Paper className="login-register_content">
              <h2 className="center">Users</h2>
              {renderField()}
              <div className="center u-margin-top-medium u-margin-bottom-small">
                <Button
                  variant="contained"
                  color="default"
                  className="medium-size  u-margin-right-small"
                  onClick={() => history.goBack()}
                >
                  cancel
                </Button>
                <Button
                  variant="contained"
                  color="primary"
                  className="medium-size"
                  type="submit"
                >
                  UPDATE
                </Button>
              </div>
            </Paper>
          </form>
        )}
      />
    </div>
  );
};

const mapStateToProps = createStructuredSelector({
  user: selectUserById
});

const mapDispatchToProps = dispatch => ({
  fetchUser: id => dispatch(fetchUserByIdStart(id)),
  updateUser: (id, form) => dispatch(updateUserStart(id, form))
});

export default withRouter(
  connect(mapStateToProps, mapDispatchToProps)(UserForm)
);
