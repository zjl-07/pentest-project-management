import React, { useState } from "react";
import { withRouter } from "react-router-dom";
import { connect } from "react-redux";
import { createStructuredSelector } from "reselect";
import { selectAllCorporate } from "redux/corporate/corporate.selector";
import { deleteCorporateStart } from "redux/corporate/corporate.action";
import CardComponent from "components/card/card";
import DialogComponent from "components/dialog/dialog";
import Button from "@material-ui/core/Button";
import SearchIcon from "@material-ui/icons/Search";

const Corporate = ({ company, history, match, deleteCorporateById }) => {
  const {
    user: { role }
  } = JSON.parse(localStorage.getItem("currentUser"));

  const [search, setSearhValue] = useState("");
  const [open, setModalStatus] = useState(false);
  const [corporate, setCorporate] = useState(undefined);

  const onToggleModal = company => {
    setModalStatus(!open);

    if (company !== undefined) {
      return setCorporate(company, [corporate]);
    }
  };

  const filteredCompany = company.filter(
    company => company.name.toLowerCase().indexOf(search.toLowerCase()) !== -1
  );

  const handleFilter = e => setSearhValue(e.target.value);

  return (
    <div className="main-corporate">
      <div className="main-header">
        <div className="search">
          <div className="search-icon">
            <SearchIcon />
          </div>
          <input
            type="text"
            placeholder="Searchâ€¦"
            className="search-input"
            onChange={handleFilter}
          />
        </div>
        <div>
          {!!(role !== "user") && (
            <Button
              size="large"
              variant="contained"
              color="primary"
              className="medium-size"
              onClick={() => history.push(`${match.path}corporate/add`)}
            >
              Add New Company
            </Button>
          )}
        </div>
      </div>
      <div className="corporate">
        {filteredCompany.map(company => (
          <CardComponent
            key={company._id}
            company={company}
            role={role}
            onToggleModal={() => onToggleModal(company)}
            deleteCard={() => deleteCorporateById(company._id)}
            editCard={() => history.push(`/corporate/${company._id}/edit`)}
          />
        ))}
        {corporate && (
          <DialogComponent
            modal={open}
            onToggleModal={() => onToggleModal(corporate)}
            company={corporate}
          />
        )}
      </div>
    </div>
  );
};

const mapStateToProps = createStructuredSelector({
  company: selectAllCorporate
});

const mapDispatchToProps = dispatch => ({
  deleteCorporateById: id => dispatch(deleteCorporateStart(id))
});

export default withRouter(
  connect(mapStateToProps, mapDispatchToProps)(Corporate)
);
