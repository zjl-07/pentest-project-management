import React, { Component } from "react";
import { withRouter } from "react-router-dom";
import { connect } from "react-redux";
import { createStructuredSelector } from "reselect";
import { selectVulnById } from "redux/vuln/vuln.selector";
import { selectAllDesc } from "redux/desc/desc.selector";
import {
  fetchVulnByIdStart,
  addVulnStart,
  updateVulnStart
} from "redux/vuln/vuln.action";
import { Form, Field } from "react-final-form";
import { TextField, Select } from "final-form-material-ui";
import { Paper, Grid, Button, MenuItem } from "@material-ui/core";
import { MuiPickersUtilsProvider } from "@material-ui/pickers";
import DateFnsUtils from "@date-io/date-fns";
import DatePickerWrapper from "components/date-picker/date-picker";

class VulnForm extends Component {
  componentDidMount() {
    const { vulnId } = this.props.match.params;
    const { fetchVulnById } = this.props;

    if (vulnId) {
      fetchVulnById(vulnId);
    }
  }

  onSubmit = async values => {
    const { history, addVuln, updateVuln } = this.props;
    const { vulnId, id } = this.props.match.params;
    const newValues = { ...values, projectId: id };
    if (vulnId) {
      updateVuln(vulnId, newValues);
    } else {
      addVuln(newValues);
    }

    history.goBack();
  };

  render() {
    const { onSubmit } = this;
    const { history, vuln, desc } = this.props;

    return (
      <div className="customed_form">
        <div className="center">
          <h2>Add/Edit Vulnerability</h2>
          {console.log(this.props)}
        </div>
        <Form
          onSubmit={onSubmit}
          initialValues={{ ...vuln }}
          render={({ handleSubmit, submitting, values }) => (
            <form onSubmit={handleSubmit} noValidate>
              <Paper className="customed_form-content">
                <Grid container alignItems="flex-start" spacing={2}>
                  <Grid item xs={12}>
                    <Field
                      fullWidth
                      required
                      name="name"
                      component={TextField}
                      type="text"
                      label="Name"
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <Field
                      name="description"
                      component={TextField}
                      fullWidth
                      margin="normal"
                      label="Vuln Description"
                    />
                  </Grid>
                  <MuiPickersUtilsProvider utils={DateFnsUtils}>
                    <Grid item xs={6}>
                      <Field
                        name="createAt"
                        component={DatePickerWrapper}
                        fullWidth
                        margin="normal"
                        label="Create at"
                      />
                    </Grid>
                    <Grid item xs={6}>
                      <Field
                        InputLabelProps={{
                          shrink: true
                        }}
                        name="poc"
                        component={TextField}
                        type="file"
                        fullWidth
                        margin="normal"
                        label="Target"
                      />
                    </Grid>
                  </MuiPickersUtilsProvider>
                  <Grid item xs={12}>
                    <Field
                      name="location"
                      component={TextField}
                      fullWidth
                      margin="normal"
                      label="location"
                    />
                  </Grid>
                </Grid>
                <h3>Desc</h3>
                <Grid item xs={12}>
                  <Field
                    fullWidth
                    name="desc"
                    component={Select}
                    label="Select Desc"
                    formControlProps={{ fullWidth: true }}
                  >
                    {desc.map(desc => (
                      <MenuItem key={desc._id} value={desc}>
                        {desc.name}
                      </MenuItem>
                    ))}
                  </Field>
                  *Name, CWE, and Decs will be depend on this selection
                </Grid>

                <Grid
                  xs={12}
                  item
                  style={{
                    marginTop: 16
                  }}
                >
                  <Field
                    fullWidth
                    name="status"
                    component={Select}
                    label="Status"
                    formControlProps={{ fullWidth: true }}
                  >
                    <MenuItem value={false}>CLOSED</MenuItem>
                    <MenuItem value={true}>OPEN</MenuItem>
                  </Field>
                  *Name, CWE, and Decs will be depend on this selection
                </Grid>
                <Grid
                  item
                  xs={12}
                  style={{
                    marginTop: 16,
                    display: "flex",
                    justifyContent: "flex-end"
                  }}
                >
                  <Button
                    id="default-size"
                    variant="contained"
                    color="default"
                    className="u-margin-right-small"
                    onClick={() => history.goBack()}
                  >
                    Cancel
                  </Button>

                  <Button
                    id="default-size"
                    variant="contained"
                    color="primary"
                    type="submit"
                    disabled={submitting}
                  >
                    Submit
                  </Button>
                </Grid>
              </Paper>
            </form>
          )}
        />
      </div>
    );
  }
}

const mapStateToProps = createStructuredSelector({
  desc: selectAllDesc,
  vuln: selectVulnById
});

const mapDispatchToProps = dispatch => ({
  fetchVulnById: id => dispatch(fetchVulnByIdStart(id)),
  addVuln: newVuln => dispatch(addVulnStart(newVuln)),
  updateVuln: (id, newVuln) => dispatch(updateVulnStart(id, newVuln))
});
export default withRouter(
  connect(mapStateToProps, mapDispatchToProps)(VulnForm)
);
