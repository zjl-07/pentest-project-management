import React, { useState } from "react";
import { withRouter } from "react-router-dom";
import EnhancedTableHead from "components/user-table/enhanced-table-head";
import Table from "@material-ui/core/Table";
import TableBody from "@material-ui/core/TableBody";
import TablePagination from "@material-ui/core/TablePagination";
import TableRow from "@material-ui/core/TableRow";
import TableCell from "@material-ui/core/TableCell";
import Paper from "@material-ui/core/Paper";
import { stableSort, getSorting } from "utils/utils";
import { useStyles } from "./user-table.styles";
import IconButton from "@material-ui/core/IconButton";
import DeleteIcon from "@material-ui/icons/Delete";
import EditIcon from "@material-ui/icons/Edit";
import DialogFinding from "components/dialog/dialog-finding";
import { connect } from "react-redux";
import ComfirmDeleteDialog from "components/comfirm-delete-dialog/confirm-delete-dialog";
import { deleteUserStart } from "redux/user/user.action";

const UserEnhancedTable = ({ rows, history, match, deleteUser, editable }) => {
  const {
    user: { _id }
  } = JSON.parse(localStorage.getItem("currentUser"));

  const [open, setModalStatus] = useState(false);
  const [data, setData] = useState(undefined);

  const onToggleModal = item => {
    setModalStatus(!open);

    if (item !== undefined) {
      return setData(item);
    }
  };

  const [deleteId, setId] = useState(undefined);
  const [modalOpen, setDeleteModalStatus] = useState(false);

  const onToggleDeleteModal = id => {
    setDeleteModalStatus(!modalOpen);
    setId(id, [deleteId]);
  };

  const classes = useStyles();
  const [order, setOrder] = React.useState("asc");
  const [orderBy, setOrderBy] = React.useState("calories");
  const [selected, setSelected] = React.useState([]);
  const [page, setPage] = React.useState(0);
  const [rowsPerPage, setRowsPerPage] = React.useState(5);

  const handleRequestSort = (event, property) => {
    const isDesc = orderBy === property && order === "desc";
    setOrder(isDesc ? "asc" : "desc");
    setOrderBy(property);
  };

  const handleClick = (event, name) => {
    const selectedIndex = selected.indexOf(name);
    let newSelected = [];

    if (selectedIndex === -1) {
      newSelected = newSelected.concat(selected, name);
    } else if (selectedIndex === 0) {
      newSelected = newSelected.concat(selected.slice(1));
    } else if (selectedIndex === selected.length - 1) {
      newSelected = newSelected.concat(selected.slice(0, -1));
    } else if (selectedIndex > 0) {
      newSelected = newSelected.concat(
        selected.slice(0, selectedIndex),
        selected.slice(selectedIndex + 1)
      );
    }

    setSelected(newSelected);
  };

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = event => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const emptyRows =
    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);

  return (
    <div className={classes.root}>
      <Paper className={classes.paper}>
        <header className={classes.heading}>Users</header>
        <div className={classes.tableWrapper}>
          <Table
            className={classes.table}
            aria-labelledby="tableTitle"
            aria-label="enhanced table"
          >
            <EnhancedTableHead
              classes={classes}
              numSelected={selected.length}
              order={order}
              orderBy={orderBy}
              onRequestSort={handleRequestSort}
              rowCount={rows.length}
            />

            <TableBody>
              {stableSort(rows, getSorting(order, orderBy))
                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                .map(row => {
                  return (
                    <TableRow
                      key={row._id}
                      hover
                      onClick={event => handleClick(event, row.name)}
                      tabIndex={-1}
                    >
                      <TableCell>{row.name}</TableCell>
                      <TableCell>{row.email}</TableCell>
                      <TableCell>{row.role}</TableCell>
                      <TableCell>
                        <IconButton
                          aria-label="edit"
                          color="primary"
                          onClick={() => history.push(`users/${row._id}/edit`)}
                        >
                          <EditIcon />
                        </IconButton>
                        {row._id !== _id && (
                          <IconButton
                            aria-label="delete"
                            color="secondary"
                            onClick={() => onToggleDeleteModal(row._id)}
                          >
                            <DeleteIcon />
                          </IconButton>
                        )}
                      </TableCell>
                    </TableRow>
                  );
                })}
              {emptyRows > 0 && (
                <TableRow style={{ height: 53 * emptyRows }}>
                  <TableCell colSpan={6} />
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
        <TablePagination
          rowsPerPageOptions={[5, 10, 25]}
          component="div"
          count={rows.length}
          rowsPerPage={rowsPerPage}
          page={page}
          onChangePage={handleChangePage}
          onChangeRowsPerPage={handleChangeRowsPerPage}
        />
      </Paper>

      {data && (
        <DialogFinding
          editable={editable}
          modal={open}
          data={data}
          onToggleModal={() => onToggleModal()}
        />
      )}

      <ComfirmDeleteDialog
        modal={modalOpen}
        onToggleModal={onToggleDeleteModal}
        deleteCard={() => deleteUser(deleteId)}
      />
    </div>
  );
};

const mapDispatchToProps = dispatch => ({
  deleteUser: id => dispatch(deleteUserStart(id))
});

export default withRouter(connect(null, mapDispatchToProps)(UserEnhancedTable));
