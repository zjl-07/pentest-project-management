import React, { useState } from "react";
import { withRouter } from "react-router-dom";
import { connect } from "react-redux";
import Card from "@material-ui/core/Card";
import CardActions from "@material-ui/core/CardActions";
import CardContent from "@material-ui/core/CardContent";
import Button from "@material-ui/core/Button";
import Typography from "@material-ui/core/Typography";
import CalendarTodayIcon from "@material-ui/icons/CalendarToday";
import EventAvailableIcon from "@material-ui/icons/EventAvailable";
import Avatar from "@material-ui/core/Avatar";
import ComfirmDeleteDialog from "components/comfirm-delete-dialog/confirm-delete-dialog";
import { projectItemStyles } from "./project.styles";
import { deleteProjectStart } from "redux/project/project.action";
const ProjectItem = ({
  id,
  name,
  description,
  startDate,
  endDate,
  corporateId,
  history,
  deleteProject,
  editable
}) => {
  const classes = projectItemStyles();
  const [open, setModalStatus] = useState(false);
  const onToggleDeleteModal = () => {
    setModalStatus(!open);
  };

  const {
    user: { role }
  } = JSON.parse(localStorage.getItem("currentUser"));

  return (
    <div>
      <Card className={classes.card}>
        <CardContent>
          <Typography variant="h4" component="h2" className={classes.header}>
            {name}
          </Typography>
          <div className={classes.date}>
            <div className={classes.flex}>
              <Avatar variant="rounded" size="small" className={classes.green}>
                <CalendarTodayIcon />
              </Avatar>
              <span>{startDate.slice(0, 10)}</span>
            </div>
            <div className={classes.flex}>
              <Avatar variant="rounded" size="small" className={classes.red}>
                <EventAvailableIcon />
              </Avatar>
              <span>{endDate.slice(0, 10)}</span>
            </div>
          </div>
          <div></div>
          <Typography className={classes.pos} color="textSecondary">
            {description}
          </Typography>
        </CardContent>
        <CardActions
          className={`${classes.footer} ${role === "user" && "card-center"}`}
        >
          <Button
            size="small"
            variant="contained"
            color="primary"
            className="medium-size"
            onClick={() => history.push(`/projects/${id}`)}
          >
            View Project
          </Button>
          {role !== "user" && (
            <>
              <Button
                size="small"
                variant="outlined"
                color="primary"
                className={classes.projectButton}
                onClick={() =>
                  history.push(`/corporate/${corporateId}/projects/${id}/edit`)
                }
              >
                Edit
              </Button>
              <Button
                size="small"
                variant="outlined"
                color="secondary"
                className={classes.projectButton}
                onClick={() => onToggleDeleteModal()}
              >
                Delete
              </Button>
            </>
          )}
        </CardActions>
      </Card>
      <ComfirmDeleteDialog
        modal={open}
        onToggleModal={onToggleDeleteModal}
        deleteCard={() => deleteProject(id)}
      />
    </div>
  );
};

const mapDispatchToProps = dispatch => ({
  deleteProject: id => dispatch(deleteProjectStart(id))
});

export default withRouter(connect(null, mapDispatchToProps)(ProjectItem));
