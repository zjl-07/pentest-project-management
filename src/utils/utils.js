export const groupBy = key => array =>
  array.reduce((objectsByKeyValue, obj) => {
    const value = obj[key];
    objectsByKeyValue[value] = (objectsByKeyValue[value] || []).concat(obj);
    return objectsByKeyValue;
  }, {});

export const getNewestProjectData = (previousState, newState) => {
  const newestState = [...previousState];
  const index = newestState.findIndex(c => c.id === newState.id);
  newestState[index] = newState;
  return newState;
};

export const deleteItem = (itemToBeDelete, deletedId) => {
  return itemToBeDelete.filter(item => item.id !== deletedId);
};

// table
export const desc = (a, b, orderBy) => {
  if (b[orderBy] < a[orderBy]) {
    return -1;
  }
  if (b[orderBy] > a[orderBy]) {
    return 1;
  }
  return 0;
};

export const stableSort = (array, cmp) => {
  const stabilizedThis = array.map((el, index) => [el, index]);
  stabilizedThis.sort((a, b) => {
    const order = cmp(a[0], b[0]);
    if (order !== 0) return order;
    return a[1] - b[1];
  });
  return stabilizedThis.map(el => el[0]);
};

export const getSorting = (order, orderBy) => {
  return order === "desc"
    ? (a, b) => desc(a, b, orderBy)
    : (a, b) => -desc(a, b, orderBy);
};

export const createData = (name, calories, fat, carbs, protein) => {
  return { name, calories, fat, carbs, protein };
};
